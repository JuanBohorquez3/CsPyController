CsPyController notes:

current question:

TODO:
    piezo numpy array
    AO numpy array
    RF gen numpy aray
    loading of only part of settings
    replace other indexed Stacks with no stack at all?
    make it so that RangeProp high and low could be re-assigned to None dynamically if desired (without raising error, unless value is outside that range)
    make it so that BoolProps get evaluated on instantiation, don't wait for settings to be loaded, because that may never happen, function passed on initialization should be valid (or provide default behavior), could make alternate valueText if that is useful
    get red box validation display working completely (right now only works from GUI, but not from backend)
    make analog output graph update on add new equation or delete equation
    send AO equations in compressed form
    use http://olgabot.github.io/prettyplotlib/ ?
    change LabView demo data to be a more flexible "echo" from python, would be useful for running analysis tests, implement in python test server as well
    optimizer
    python menu Halt should send kill signal to LabView (no longer an issue with cycling of measurements)
    is it possible to do echoBox measurement by measurement? (send with "measure" command, instead of as instrument setup?)
    send only changed commands on new iteration
    make red validation boxes work well enough to be used
    make shotsBrowser update each measurement if selected index is same as current iteration and measurement
    selectable colors on digital waveform plot
    make dependent variables a fixed-width (courier) font
    add 2nd HSDIO card, and combine them so it looks like 1 card with 64 channels
    a lot of the things that I have done using lists of Prop in ListProp would be better done using a separate numpy array for each property of the Prop (or one array of compound dtype)
    DAQmxDO grid generation is obtuse (simplify it)
    waveform values are not saved if Validation fails (they erase if a channel is added)
    Ability to send a reset signal to various instruments
    Make it so you can't disturb running experiment settings
    Array piezo settings
    Restart crashed experiment (Use separate load experiment?)
    Allow for choosing current ivar indices, and ordering
    Make ctrl+Q halt
    Blank middle image on bad selector
    Make sure to use deferred_call everywhere necessary
    make histogram grid filled gaussians go down to the bottom, even if they get cut off on the end
    retention graph as difference between shot 0 and 1
    make sure ivars do not reset when optimization is Continued

Done:
    check analysis
    retention graph
    convert histogram to multiline
    error bars on iteration graph
    Updating of evaluated numbers for waveform grid
    make sure waveform names updates
    Patch based waveform plot
    Stop crashing: "invalid value in doublescalars"
    Change tool_tip to status_tip
    If a variable is created in dependentVariables, and then later deleted (but not reassigned) it persists, and can still be used in all the equation boxes.  This is a problem.
    Don't let independent variables go out of range at the end of an experiment
    One waveform vs index stacked waveforms
    TTL input
    Button to upload experiment at current point when paused (Finish experiment)
    Lots more logging
    Investigate 'crashes' branch
    All ListProps lose GUI linkage on load from file.  Fix with custom Looper that gives ListProp a reference to gui in 'initialized::'
    Tool tips on all Fields
    Logging to memory and then saving that log to hdf5
    ComboBox for waveforms
    implement settimeout instead of setblocking for TCP communication with timeout equal to experiment timeout or shorter
    improve handling of TCP disconnect/reconnect
    just one big timeout for whole thing, plus a LabView setup timeout
    clear HSDIO waveform memory between iterations?
    make it so that only relevant channels are shown in waveform (can we do this is hardware too? .. no)
    HSDIO start trigger
    copy to network
    horizontal scroll bar doesn't appear when too many transitions are added to waveform
    make it so that the TCP connection is labeled as uninitialized on an error
    clean out unnecessary files in LabView section
    slow_noise_eater waveform
    waveform values don't always appear, even if state evaluates okay
    DAQmx settings cannot be updated without error
    "Bad file descriptor" or TCP close, and general ability to restart TCP without restarting python
    make sure HSDIO script is always written AFTER waveforms
    It would be nice to make the variable reporting format able to handle line breaks somehow.  (Solved using triple quotes ''' ''')
    you erased the waveform names.  Fix that.
    fix float divide by zero error on AnalogOutput initial evaluate
    tick all channels on waveform y-axis, label x-axis as "samples" and limit to integer ticks?
    remove git_repos_old on hexagon
    autosave HDF5 on experiment run
    save settings to HDF5
    compressedGenerate
    implement "hardware" flag on Prop to control what gets sent to hardware and what doesn't (default to True) (implemented as doNotSendToHardware list)
    Note: changed waveform PGC_1 slightly regarding t1 delay, should be as intended now
    make sure you don't get same measurement twice (do this on LabView side, mark a measurement as uploaded, or just erase return vals after use)
    side-by-side picture graphs
    do not save data needs to really not save data to hdf5 in memory also, it is too much data
    use setupLOG on all modules
    send only waveforms actually used.
    waveform upload error (MSB LSB order is reversed)
    threading made optional (default off) in analysis, so they can be run in a guaranteed order
    filters-implement as return values from analyses
    2013 style files: Processed Data.txt, All Signal.txt, average_of_all_images_in_experiment.png, Data Order Log.txt, variables.txt, Camera Data Iteration0.txt
    return error and log from LabView initialization
    Make hexagon not read-only so I can push git to there
    Add instruments to backend and detail to front panel
    make waveform plotting even faster by changing data in plot objects, instead of creating new ones.
    make python and labview both able to interpret 'false' and 'False' and '0' and '' as False
    Fill in the rest of the instruments
    Send real experiment settings back and forth
    make all XML protocol good, and match between LabView and python
    add results to an hdf5 object as they come in, each gets put into experiment.results[measurement_number]['name'] after some proper dissection
    'MESG'+4 byte total length + 4 byte name length + name + 4 byte data length + data
    Got analog output graph to display, now put the right equations in it
    XML can't handle just a number as a tag, apparently.  WHY?!!!  Make it so XML tags for list elements start with a word, then number
    update HSDIO and DDS to use ListProp
    make a method that rescans all the variables, to make sure everything is updated from XML?
    on load refresh waveforms (or everything?)
    working on fromXML in Waveforms
    how to deal with iterables in the XML.  Probably look for hasattr(__iter__).  
    add ability to remove a transition
    closed waveforms should be removed.
    add graph to waveform listing
    Convert waveform table to HSDIO loadable format
    add channel info to waveform listing
    make sure everything gets updated appropriately
    -add explicit update to experiment run
    Need to make sure we don't pickle anything that has
        references back to experiment, because that is happening right now and we get a LOOOONG file.
    hot on the trail of a good XML solution, I decided pickling is okay for individual elements, within an XML framework
    
Scratch notes:
    updating ivar function on GUI recalculates that one ivar but nothing else.  Hitting the evaluate button does experiment.evaluateAll()
    Enaml group at: https://groups.google.com/forum/#!forum/enaml
    2013 style files:
        pre-experiment:
            autosave_settings.xml
                This is the settings file.  We could save this as normal, but should also add all settings to HDF5 as a prelude to HDF5 settings storage.
            All Signal.txt
                Lists number of steps for each ivar.  "Formulas" was never operational.
                a Iterations:	1	b Iterations:	1	l0 Iterations:	11	Formulas:	0
            variables.txt
                Description	Name (a,a0...a9)	min	max	# steps
                raman frequency 	a	9172.618868	9172.618868	1
                microwave frequency	b	9192.632496	9192.632496	1
                459 Raman Pulse	l0	0.000000	0.030000	11
        postMeasurement:
            Camera Data Iteration0 (signal).txt
                First row:Camera Data	01/29/2014	03:23 PM	Shots per Measurement:	2	Regions per Measurement:	49
                New row for each measurement.  49 columns contain roi sums.  Tab separated.  No leading or trailing tabs.
            Counter 0 Data Iteration0.txt
                First row:Counter Data	01/29/2014	03:23 PM
                2 new rows for each measurement.
                    Measurement #0\tTotal: %d\n
                    tab delimited list of counter values (for each counter clock bin)
        PostIteration:
            Data Order Log.txt
                one line with ivar indices
                (a,b,l0): 	0,0,0	0,0,1	0,0,2	0,0,3	0,0,4	0,0,5	0,0,6	0,0,7	0,0,8	0,0,9	0,0,10

        postExperiment:
            .\images\average_of_all_images_in_experiment.png
                average of images.
            error_log.txt
                saved error log

Crash notes:
    It did not crash on this, but is this related to Enaml thread problems?:
        QObject::connect: Cannot queue arguments of type 'QModelIndex'
        (Make sure 'QModelIndex' is registered using qRegisterMetaType().)
        QObject::connect: Cannot queue arguments of type 'QModelIndex'
        (Make sure 'QModelIndex' is registered using qRegisterMetaType().)